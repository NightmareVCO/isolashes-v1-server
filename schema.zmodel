// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//todo: shopping cart shouldnt be optional

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  CUSTOMER
  EMPLOYEE
}

abstract model Base {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User extends Base {
  name           String
  lastName       String
  birthDate      DateTime?
  address        Address[]
  email          String          @email @unique @email('Debe de ser un correo valido.')
  password       String?         @password @omit @map("password_hash") @length(min: 8, message: 'La contrase√±a debe de tener almenos 8 caracteres.')
  phone          String?         @unique @length(min: 10, max: 15, message: 'El numero de telefono debe de tener almenos 10 digitos.')
  points         Int             @default(0)
  roles          Roles[]         @default([CUSTOMER])
  status         Boolean         @default(true)
  google         Boolean         @default(false)

  medicalInfo    String[]
  eyesConditions EyeCondition[]
  appointment    Appointment[]
  creditCard     CreditCard[]
  reviews        ProductReview[]
  orders         Order[]
  purchases      Receipt[]
  shoppingCart   ShoppingCart?


  employee       Employee?

  @@auth
  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', "EMPLOYEE" in auth().roles)

  @@allow('read, update', auth() == this)

  @@allow('create', true)
}

model Address extends Base {
  country String
  state   String
  city    String
  street  String
  number  String
  zipCode String

  owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String  @default(auth().id)

  order   Order[]

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('all', auth() == owner)

  @@allow('create', owner == auth())
  @@allow('create', true)
}

model CreditCard extends Base {
  number     String
  expiration String
  cvv        String
  name       String
  lastName   String

  owner      User   @relation(fields: [ownerId], references: [id])
  ownerId    String @default(auth().id)

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', auth() == owner)
  @@allow('create', owner == auth())

  @@allow('create', true)
}

model EyeCondition extends Base {
  name        String
  description String

  customer    User   @relation(fields: [customerId], references: [id])
  customerId  String

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('all', "EMPLOYEE" in auth().roles)

  @@allow('read', auth() == customer)

  @@allow('create', true)
}


model Employee extends Base {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  entryDate DateTime
  endDate   DateTime
  position  String

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read,update', auth() == user)
}

model Appointment extends Base {
  customer   User?    @relation(fields: [customerId], references: [id])
  customerId String?

  fullName   String
  phone      String
  email      String   @email('Debe de ser un correo valido.')
  ticket     Int      @unique @default(autoincrement())
  date       DateTime

  branch     Branch   @relation(fields: [branchId], references: [id])
  branchId   String

  hours      Hour     @relation(fields: [hourId], references: [id])
  hourId     String

  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  String

  receipt    Receipt?


  status     Boolean  @default(true)
  completed  Boolean  @default(false)
  paid       Boolean  @default(false)

  extensions String[]
  lifting    String[]
  eyebrows   String[]

  image      String?

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read, update', "EMPLOYEE" in auth().roles)

  @@allow('read', auth() != null && auth() == customer)

  @@allow('create', true)
}

model Branch extends Base {
  name        String
  address     String
  phone       String
  email       String
  schedule    String
  cover       String
  status      Boolean       @default(true)

  appointment Appointment[]
  receipt     Receipt[]

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', true)
}

model Hour extends Base {
  time        String        @unique
  status      Boolean       @default(true)

  appointment Appointment[]

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', true)
}

model Service extends Base {
  name              String          @unique
  description       String
  price             Float
  status            Boolean         @default(true)

  appointment       Appointment[]
  receipt           Receipt[]

  serviceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  serviceCategoryId String

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', true)
}

model ServiceCategory extends Base {
  name        String    @unique
  description String
  status      Boolean   @default(true)
  cover       String?
  cover2      String?

  service     Service[]

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', true)
}

model Product extends Base {
  name              String
  description       String
  price             Float
  stock             Int
  minStock          Int
  status            Boolean            @default(true)
  dateAdded         DateTime           @default(now())
  isNew             Boolean            @default(true)
  isPromotion       Boolean            @default(false)
  promotionPrice    Float?

  productCategory   ProductCategory    @relation(fields: [productCategoryId], references: [id])
  productCategoryId String

  productImage      ProductImage[]
  productReview     ProductReview[]
  shoppingCartItem  ShoppingCartItem[]
  orderItem         OrderItem[]

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read, update', "EMPLOYEE" in auth().roles)
  @@allow('read', true)
}

model Order extends Base {
  user          User?       @relation(fields: [userId], references: [id])
  userId        String?

  address       Address?    @relation(fields: [addressId], references: [id])
  addressId     String?

  receipt       Receipt?
  receiptId     String?     @unique

  userName      String?
  userPhone     String?
  userEmail     String?

  products      OrderItem[]
  total         Float
  status        Boolean     @default(true)
  delivered     Boolean
  completed     Boolean
  dateOrdered   DateTime
  dateDelivered DateTime?
  dateCompleted DateTime?
  inPlace       Boolean

  @@allow('create', true)

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', "EMPLOYEE" in auth().roles)
  @@allow('read', auth() == user)
}

model OrderItem extends Base {
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  price     Float

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  @@allow('all', "ADMIN" in auth().roles)

  @@allow('read, create', true)
}

model Receipt extends Base {
  user          User?        @relation(fields: [userId], references: [id])
  userId        String?

  userName      String?
  userPhone     String?
  userEmail     String?
  employeeName  String?

  status        Boolean      @default(true)

  order         Order?       @relation(fields: [orderId], references: [id])
  orderId       String?      @unique
  services      Service[]
  branch        Branch?      @relation(fields: [branchId], references: [id])
  branchId      String?
  inPlace       Boolean

  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId String?      @unique

  total         Float
  paymentMethod String
  date          DateTime

  @@allow('create', true)

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', "EMPLOYEE" in auth().roles)

  @@allow('read', auth() == user)
}

model ProductCategory extends Base {
  name        String    @unique
  description String
  status      Boolean   @default(true)
  cover       String?

  product     Product[]

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', true)
}

model ProductImage extends Base {
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', true)
}

model ProductReview extends Base {
  rating    Int
  comment   String
  date      DateTime
  name      String

  product   Product  @relation(fields: [productId], references: [id])
  productId String

  user      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', "EMPLOYEE" in auth().roles)
  @@allow('read', true)
}

model ShoppingCart extends Base {
  user   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String             @unique

  items  ShoppingCartItem[]

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', auth() != null && auth() == user)
  @@allow('create', true)
}

model ShoppingCartItem extends Base {
  quantity       Int
  product        Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId      String
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id], onDelete: Cascade)
  shoppingCartId String

  @@allow('all', "ADMIN" in auth().roles)
  @@allow('read', true)
}